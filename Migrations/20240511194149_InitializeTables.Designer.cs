// <auto-generated />
using System;
using Hazo.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hazo.Migrations
{
    [DbContext(typeof(HazoContext))]
    [Migration("20240511194149_InitializeTables")]
    partial class InitializeTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("Hazo.Models.Book", b =>
                {
                    b.Property<string>("DocumentRef")
                        .HasColumnType("TEXT")
                        .HasColumnName("Document_Ref");

                    b.Property<string>("ISBN")
                        .HasColumnType("TEXT");

                    b.HasKey("DocumentRef");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("Hazo.Models.CategoricalCharacter", b =>
                {
                    b.Property<string>("DocumentRef")
                        .HasColumnType("TEXT")
                        .HasColumnName("Document_Ref");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.HasKey("DocumentRef");

                    b.ToTable("Categorical_Character", (string)null);
                });

            modelBuilder.Entity("Hazo.Models.DescriptorVisibilityInapplicable", b =>
                {
                    b.Property<string>("DescriptorRef")
                        .HasColumnType("TEXT")
                        .HasColumnName("Descriptor_Ref");

                    b.Property<string>("InapplicableDescriptorRef")
                        .HasColumnType("TEXT")
                        .HasColumnName("Inapplicable_Descriptor_Ref");

                    b.HasKey("DescriptorRef", "InapplicableDescriptorRef");

                    b.HasIndex("InapplicableDescriptorRef");

                    b.ToTable("Descriptor_Visibility_Inapplicable", (string)null);
                });

            modelBuilder.Entity("Hazo.Models.DescriptorVisibilityRequirement", b =>
                {
                    b.Property<string>("DescriptorRef")
                        .HasColumnType("TEXT")
                        .HasColumnName("Descriptor_Ref");

                    b.Property<string>("RequiredDescriptorRef")
                        .HasColumnType("TEXT")
                        .HasColumnName("Required_Descriptor_Ref");

                    b.HasKey("DescriptorRef", "RequiredDescriptorRef");

                    b.HasIndex("RequiredDescriptorRef");

                    b.ToTable("Descriptor_Visibility_Requirement", (string)null);
                });

            modelBuilder.Entity("Hazo.Models.Document", b =>
                {
                    b.Property<string>("Ref")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Doc_Order");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Ref");

                    b.ToTable("Document", (string)null);

                    b.HasData(
                        new
                        {
                            Ref = "_cal",
                            Details = "Gregorian calendar",
                            Name = "Calendar",
                            Order = 0,
                            Path = ""
                        },
                        new
                        {
                            Ref = "_geo",
                            Details = "All geographical places",
                            Name = "Geographical Places",
                            Order = 1,
                            Path = ""
                        },
                        new
                        {
                            Ref = "_geo_mada",
                            Details = "The island of Madagascar",
                            Name = "Madagascar",
                            Order = 2,
                            Path = "_geo"
                        });
                });

            modelBuilder.Entity("Hazo.Models.DocumentAttachment", b =>
                {
                    b.Property<string>("DocumentRef")
                        .HasColumnType("TEXT")
                        .HasColumnName("Document_Ref");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Attachment_Index");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DocumentRef", "Index");

                    b.ToTable("Document_Attachment", (string)null);
                });

            modelBuilder.Entity("Hazo.Models.DocumentTranslation", b =>
                {
                    b.Property<string>("DocumentRef")
                        .HasColumnType("TEXT")
                        .HasColumnName("Document_Ref");

                    b.Property<string>("LangRef")
                        .HasColumnType("TEXT")
                        .HasColumnName("Lang_Ref");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DocumentRef", "LangRef");

                    b.HasIndex("LangRef");

                    b.ToTable("Document_Translation", (string)null);
                });

            modelBuilder.Entity("Hazo.Models.GeographicalCharacter", b =>
                {
                    b.Property<string>("DocumentRef")
                        .HasColumnType("TEXT")
                        .HasColumnName("Document_Ref");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<string>("MapRef")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Map_Ref");

                    b.HasKey("DocumentRef");

                    b.HasIndex("MapRef");

                    b.ToTable("Geographical_Character", (string)null);
                });

            modelBuilder.Entity("Hazo.Models.GeographicalMap", b =>
                {
                    b.Property<string>("DocumentRef")
                        .HasColumnType("TEXT")
                        .HasColumnName("Document_Ref");

                    b.Property<string>("MapFile")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Map_File");

                    b.Property<string>("MapFileFeatureName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Map_File_Feature_Name");

                    b.Property<string>("PlaceRef")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Place_Ref");

                    b.HasKey("DocumentRef");

                    b.HasIndex("PlaceRef");

                    b.ToTable("Geographical_Map", (string)null);
                });

            modelBuilder.Entity("Hazo.Models.GeographicalPlace", b =>
                {
                    b.Property<string>("DocumentRef")
                        .HasColumnType("TEXT")
                        .HasColumnName("Document_Ref");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<int>("Scale")
                        .HasColumnType("INTEGER");

                    b.HasKey("DocumentRef");

                    b.ToTable("Geographical_Place", (string)null);

                    b.HasData(
                        new
                        {
                            DocumentRef = "_geo_mada",
                            Latitude = 46.518366999999998,
                            Longitude = -18.546564,
                            Scale = 2000
                        });
                });

            modelBuilder.Entity("Hazo.Models.Language", b =>
                {
                    b.Property<string>("Ref")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Ref");

                    b.ToTable("Lang", (string)null);

                    b.HasData(
                        new
                        {
                            Ref = "V",
                            Name = "Vernacular"
                        },
                        new
                        {
                            Ref = "CN",
                            Name = "Chinese"
                        },
                        new
                        {
                            Ref = "EN",
                            Name = "English"
                        },
                        new
                        {
                            Ref = "FR",
                            Name = "French"
                        },
                        new
                        {
                            Ref = "S2",
                            Name = "Name 2"
                        },
                        new
                        {
                            Ref = "V2",
                            Name = "Vernacular Name 2"
                        });
                });

            modelBuilder.Entity("Hazo.Models.MeasurementCharacter", b =>
                {
                    b.Property<string>("DocumentRef")
                        .HasColumnType("TEXT")
                        .HasColumnName("Document_Ref");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<string>("UnitRef")
                        .HasColumnType("TEXT");

                    b.HasKey("DocumentRef");

                    b.HasIndex("UnitRef");

                    b.ToTable("Measurement_Character", (string)null);
                });

            modelBuilder.Entity("Hazo.Models.PeriodicCharacter", b =>
                {
                    b.Property<string>("DocumentRef")
                        .HasColumnType("TEXT")
                        .HasColumnName("Document_Ref");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<string>("PeriodicCategoryRef")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Periodic_Category_Ref");

                    b.HasKey("DocumentRef");

                    b.HasIndex("PeriodicCategoryRef");

                    b.ToTable("Periodic_Character", (string)null);
                });

            modelBuilder.Entity("Hazo.Models.State", b =>
                {
                    b.Property<string>("DocumentRef")
                        .HasColumnType("TEXT")
                        .HasColumnName("Document_Ref");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.HasKey("DocumentRef");

                    b.ToTable("State", (string)null);
                });

            modelBuilder.Entity("Hazo.Models.Taxon", b =>
                {
                    b.Property<string>("DocumentRef")
                        .HasColumnType("TEXT")
                        .HasColumnName("Document_Ref");

                    b.Property<string>("Author")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Fasc")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HerbariumNumber")
                        .HasColumnType("TEXT")
                        .HasColumnName("Herbarium_No");

                    b.Property<string>("HerbariumPicture")
                        .HasColumnType("TEXT")
                        .HasColumnName("Herbarium_Picture");

                    b.Property<string>("Meaning")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Page")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Website")
                        .HasColumnType("TEXT");

                    b.HasKey("DocumentRef");

                    b.ToTable("Taxon", (string)null);
                });

            modelBuilder.Entity("Hazo.Models.TaxonBookInfo", b =>
                {
                    b.Property<string>("TaxonRef")
                        .HasColumnType("TEXT")
                        .HasColumnName("Taxon_Ref");

                    b.Property<string>("BookRef")
                        .HasColumnType("TEXT")
                        .HasColumnName("Book_Ref");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Fasc")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Page")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaxonRef", "BookRef");

                    b.HasIndex("BookRef");

                    b.ToTable("Taxon_Book_Info", (string)null);
                });

            modelBuilder.Entity("Hazo.Models.TaxonDescription", b =>
                {
                    b.Property<string>("TaxonRef")
                        .HasColumnType("TEXT")
                        .HasColumnName("Taxon_Ref");

                    b.Property<string>("DescriptionRef")
                        .HasColumnType("TEXT")
                        .HasColumnName("Description_Ref");

                    b.HasKey("TaxonRef", "DescriptionRef");

                    b.HasIndex("DescriptionRef");

                    b.ToTable("Taxon_Description", (string)null);
                });

            modelBuilder.Entity("Hazo.Models.TaxonMeasurement", b =>
                {
                    b.Property<string>("TaxonRef")
                        .HasColumnType("TEXT")
                        .HasColumnName("Taxon_Ref");

                    b.Property<string>("CharacterRef")
                        .HasColumnType("TEXT")
                        .HasColumnName("Character_Ref");

                    b.Property<double?>("Maximum")
                        .HasColumnType("REAL");

                    b.Property<double?>("Minimum")
                        .HasColumnType("REAL");

                    b.HasKey("TaxonRef", "CharacterRef");

                    b.HasIndex("CharacterRef");

                    b.ToTable("Taxon_Measurement", (string)null);
                });

            modelBuilder.Entity("Hazo.Models.TaxonSpecimenLocation", b =>
                {
                    b.Property<string>("TaxonRef")
                        .HasColumnType("TEXT")
                        .HasColumnName("Taxon_Ref");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Specimen_Index");

                    b.Property<double?>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double?>("Longitude")
                        .HasColumnType("REAL");

                    b.HasKey("TaxonRef", "Index");

                    b.ToTable("Taxon_Specimen_Location", (string)null);
                });

            modelBuilder.Entity("Hazo.Models.Unit", b =>
                {
                    b.Property<string>("Ref")
                        .HasColumnType("TEXT");

                    b.Property<string>("BaseUnitRef")
                        .HasColumnType("TEXT")
                        .HasColumnName("Base_Unit_Ref");

                    b.Property<double>("ToBaseUnitFactor")
                        .HasColumnType("REAL")
                        .HasColumnName("To_Base_Unit_Factor");

                    b.HasKey("Ref");

                    b.HasIndex("BaseUnitRef");

                    b.ToTable("Unit", (string)null);

                    b.HasData(
                        new
                        {
                            Ref = "kg",
                            ToBaseUnitFactor = 0.0
                        },
                        new
                        {
                            Ref = "g",
                            BaseUnitRef = "kg",
                            ToBaseUnitFactor = 1000.0
                        },
                        new
                        {
                            Ref = "m",
                            ToBaseUnitFactor = 0.0
                        },
                        new
                        {
                            Ref = "mm",
                            BaseUnitRef = "m",
                            ToBaseUnitFactor = 1000.0
                        },
                        new
                        {
                            Ref = "cm",
                            BaseUnitRef = "m",
                            ToBaseUnitFactor = 100.0
                        },
                        new
                        {
                            Ref = "km",
                            BaseUnitRef = "m",
                            ToBaseUnitFactor = 0.001
                        },
                        new
                        {
                            Ref = "nbr",
                            ToBaseUnitFactor = 0.0
                        });
                });

            modelBuilder.Entity("Hazo.Models.Book", b =>
                {
                    b.HasOne("Hazo.Models.Document", "Document")
                        .WithOne()
                        .HasForeignKey("Hazo.Models.Book", "DocumentRef");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Hazo.Models.CategoricalCharacter", b =>
                {
                    b.HasOne("Hazo.Models.Document", "Document")
                        .WithOne()
                        .HasForeignKey("Hazo.Models.CategoricalCharacter", "DocumentRef");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Hazo.Models.DescriptorVisibilityInapplicable", b =>
                {
                    b.HasOne("Hazo.Models.Document", "Descriptor")
                        .WithMany()
                        .HasForeignKey("DescriptorRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hazo.Models.Document", "InapplicableDescriptor")
                        .WithMany()
                        .HasForeignKey("InapplicableDescriptorRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Descriptor");

                    b.Navigation("InapplicableDescriptor");
                });

            modelBuilder.Entity("Hazo.Models.DescriptorVisibilityRequirement", b =>
                {
                    b.HasOne("Hazo.Models.Document", "Descriptor")
                        .WithMany()
                        .HasForeignKey("DescriptorRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hazo.Models.Document", "RequiredDescriptor")
                        .WithMany()
                        .HasForeignKey("RequiredDescriptorRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Descriptor");

                    b.Navigation("RequiredDescriptor");
                });

            modelBuilder.Entity("Hazo.Models.DocumentAttachment", b =>
                {
                    b.HasOne("Hazo.Models.Document", "Document")
                        .WithMany("Attachments")
                        .HasForeignKey("DocumentRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Hazo.Models.DocumentTranslation", b =>
                {
                    b.HasOne("Hazo.Models.Document", "Document")
                        .WithMany("Translations")
                        .HasForeignKey("DocumentRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hazo.Models.Language", "Lang")
                        .WithMany("Translations")
                        .HasForeignKey("LangRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Lang");
                });

            modelBuilder.Entity("Hazo.Models.GeographicalCharacter", b =>
                {
                    b.HasOne("Hazo.Models.Document", "Document")
                        .WithOne()
                        .HasForeignKey("Hazo.Models.GeographicalCharacter", "DocumentRef");

                    b.HasOne("Hazo.Models.GeographicalMap", "Map")
                        .WithMany("Characters")
                        .HasForeignKey("MapRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Map");
                });

            modelBuilder.Entity("Hazo.Models.GeographicalMap", b =>
                {
                    b.HasOne("Hazo.Models.Document", "Document")
                        .WithOne()
                        .HasForeignKey("Hazo.Models.GeographicalMap", "DocumentRef");

                    b.HasOne("Hazo.Models.GeographicalPlace", "Place")
                        .WithMany("Maps")
                        .HasForeignKey("PlaceRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Hazo.Models.GeographicalPlace", b =>
                {
                    b.HasOne("Hazo.Models.Document", "Document")
                        .WithOne()
                        .HasForeignKey("Hazo.Models.GeographicalPlace", "DocumentRef");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Hazo.Models.MeasurementCharacter", b =>
                {
                    b.HasOne("Hazo.Models.Document", "Document")
                        .WithOne()
                        .HasForeignKey("Hazo.Models.MeasurementCharacter", "DocumentRef");

                    b.HasOne("Hazo.Models.Unit", "Unit")
                        .WithMany("MeasurementCharacters")
                        .HasForeignKey("UnitRef");

                    b.Navigation("Document");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Hazo.Models.PeriodicCharacter", b =>
                {
                    b.HasOne("Hazo.Models.Document", "Document")
                        .WithOne()
                        .HasForeignKey("Hazo.Models.PeriodicCharacter", "DocumentRef");

                    b.HasOne("Hazo.Models.Document", "PeriodicCategory")
                        .WithMany("PeriodicCharacters")
                        .HasForeignKey("PeriodicCategoryRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("PeriodicCategory");
                });

            modelBuilder.Entity("Hazo.Models.State", b =>
                {
                    b.HasOne("Hazo.Models.Document", "Document")
                        .WithOne()
                        .HasForeignKey("Hazo.Models.State", "DocumentRef");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Hazo.Models.Taxon", b =>
                {
                    b.HasOne("Hazo.Models.Document", "Document")
                        .WithOne()
                        .HasForeignKey("Hazo.Models.Taxon", "DocumentRef");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Hazo.Models.TaxonBookInfo", b =>
                {
                    b.HasOne("Hazo.Models.Book", "Book")
                        .WithMany("TaxonReferences")
                        .HasForeignKey("BookRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hazo.Models.Taxon", "Taxon")
                        .WithMany("BookInfo")
                        .HasForeignKey("TaxonRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Taxon");
                });

            modelBuilder.Entity("Hazo.Models.TaxonDescription", b =>
                {
                    b.HasOne("Hazo.Models.Document", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hazo.Models.Taxon", "Taxon")
                        .WithMany()
                        .HasForeignKey("TaxonRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Description");

                    b.Navigation("Taxon");
                });

            modelBuilder.Entity("Hazo.Models.TaxonMeasurement", b =>
                {
                    b.HasOne("Hazo.Models.MeasurementCharacter", "Character")
                        .WithMany("TaxonMesurements")
                        .HasForeignKey("CharacterRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hazo.Models.Taxon", "Taxon")
                        .WithMany("Mesurements")
                        .HasForeignKey("TaxonRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Taxon");
                });

            modelBuilder.Entity("Hazo.Models.TaxonSpecimenLocation", b =>
                {
                    b.HasOne("Hazo.Models.Taxon", "Taxon")
                        .WithMany("SpecimenLocations")
                        .HasForeignKey("TaxonRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Taxon");
                });

            modelBuilder.Entity("Hazo.Models.Unit", b =>
                {
                    b.HasOne("Hazo.Models.Unit", "BaseUnit")
                        .WithMany("DerivedUnits")
                        .HasForeignKey("BaseUnitRef");

                    b.Navigation("BaseUnit");
                });

            modelBuilder.Entity("Hazo.Models.Book", b =>
                {
                    b.Navigation("TaxonReferences");
                });

            modelBuilder.Entity("Hazo.Models.Document", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("PeriodicCharacters");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Hazo.Models.GeographicalMap", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Hazo.Models.GeographicalPlace", b =>
                {
                    b.Navigation("Maps");
                });

            modelBuilder.Entity("Hazo.Models.Language", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Hazo.Models.MeasurementCharacter", b =>
                {
                    b.Navigation("TaxonMesurements");
                });

            modelBuilder.Entity("Hazo.Models.Taxon", b =>
                {
                    b.Navigation("BookInfo");

                    b.Navigation("Mesurements");

                    b.Navigation("SpecimenLocations");
                });

            modelBuilder.Entity("Hazo.Models.Unit", b =>
                {
                    b.Navigation("DerivedUnits");

                    b.Navigation("MeasurementCharacters");
                });
#pragma warning restore 612, 618
        }
    }
}
